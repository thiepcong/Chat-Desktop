/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import component.ChatBody;
import component.ChatBottom;
import component.ChatTitle;
import event.EventChat;
import event.PublicEvent;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import model.ModelAccount;
import model.ModelReceiveMessage;
import model.ModelSendMessage;
import net.miginfocom.swing.MigLayout;
import service.Service;

/**
 *
 * @author Admin
 */
public class Chat extends javax.swing.JPanel {

    /**
     * Creates new form Chat
     */
    public Chat() {
        initComponents();
        init();
    }
    private ChatTitle chatTitle;
    private ChatBody chatBody;
    private ChatBottom chatBottom;
    private List<ModelSendMessage> listSendMessage;
    private List<ModelReceiveMessage> listReceiveMessage;

    public List<ModelSendMessage> getListSendMessage() {
        return listSendMessage;
    }

    public void setListSendMessage(List<ModelSendMessage> listSendMessage) {
        this.listSendMessage = listSendMessage;
    }

    public List<ModelReceiveMessage> getListReceiveMessage() {
        return listReceiveMessage;
    }

    public void setListReceiveMessage(List<ModelReceiveMessage> listReceiveMessage) {
        this.listReceiveMessage = listReceiveMessage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 431, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void init() {
        setLayout(new MigLayout("fillx","0[fill]0","0[]0[100%, fill]0[shrink 0]0"));
        chatTitle = new ChatTitle();
        chatBody = new ChatBody();
        chatBottom = new ChatBottom();
        listSendMessage = new ArrayList<>();
        listReceiveMessage = new ArrayList<>();
        PublicEvent.getInstance().addEventChat(new EventChat(){
            @Override
            public void sendMessage(ModelSendMessage data) {
                listSendMessage.add(data);
                chatBody.addItemRight(data);
            }

            @Override
            public void receiveMessage(ModelReceiveMessage data) {
                listReceiveMessage.add(data);
                if(chatTitle.getUser()!=null && chatTitle.getUser().getUserID() == data.getFromUserID()){
                    chatBody.addItemLeft(data);
                }
            }

            @Override
            public void sendMessageDone(ModelSendMessage data) {
                chatBody.sendMessageDone(data);
            }
        });
        add(chatTitle,"wrap");
        add(chatBody,"wrap");
        add(chatBottom,"h ::50%");
//        chatBody.setVisible(false);
    }
    public void setUser(ModelAccount user){
        chatTitle.setUser(user);
        chatBottom.setUser(user);
        chatBody.clearChat();
        handleList();
    }
    
    public void handleList() {
        List<Object> combinedList = new ArrayList<>();
        combinedList.addAll(listSendMessage);
        combinedList.addAll(listReceiveMessage);

        Collections.sort(combinedList, Comparator.comparing(obj -> {
            if (obj instanceof ModelSendMessage) {
                return LocalTime.parse(((ModelSendMessage) obj).getTime(), DateTimeFormatter.ofPattern("h:mm a"));
            } else if (obj instanceof ModelReceiveMessage) {
                return LocalTime.parse(((ModelReceiveMessage) obj).getTime(), DateTimeFormatter.ofPattern("h:mm a"));
            }
            return LocalTime.MIN; 
        }));

        for (Object obj : combinedList) {
            if (obj instanceof ModelSendMessage) {
                ModelSendMessage sendMessage = (ModelSendMessage) obj;
                if (sendMessage.getFromUserID() == Service.getInstance().getUser().getUserID() && chatTitle.getUser().getUserID() == sendMessage.getToUserID()) {
                    chatBody.addItemRight(sendMessage);
                }
            } else if (obj instanceof ModelReceiveMessage) {
                ModelReceiveMessage receiveMessage = (ModelReceiveMessage) obj;
                if (chatTitle.getUser().getUserID() == receiveMessage.getFromUserID()) {
                    chatBody.addItemLeft(receiveMessage);
                }
            }
        }
    }
    
    public void updateUser(ModelAccount user){
        chatTitle.updateUser(user);
//        chatBottom.setUser(user);
    }
}
