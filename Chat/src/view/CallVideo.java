/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import com.github.sarxos.webcam.Webcam;
import io.socket.client.Ack;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import model.ModelAccount;
import model.ModelCall;
import service.Service;
import swing.ComponentResizer;

/**
 *
 * @author Nhat Minh
 */
public class CallVideo extends javax.swing.JFrame {
    private Webcam camera;
    private boolean isCaller;
    /**
     * Creates new form VideoUITest
     */
    public CallVideo() {
        initComponents();
        inittial();
    }
    private void endCall() {
        camera.close();
        cameraThread.interrupt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        endCallButton = new javax.swing.JButton();
        image = new javax.swing.JLabel();
        self = new javax.swing.JLabel();
        btnMinimize = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        endCallButton.setText("End Call");
        endCallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endCallButtonActionPerformed(evt);
            }
        });

        image.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/minimize.png"))); // NOI18N
        btnMinimize.setBorder(null);
        btnMinimize.setContentAreaFilled(false);
        btnMinimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizeActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/close.png"))); // NOI18N
        btnClose.setBorder(null);
        btnClose.setContentAreaFilled(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(self, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(endCallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnMinimize)
                        .addGap(0, 0, 0)
                        .addComponent(btnClose))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMinimize)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(self, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endCallButton, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endCallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endCallButtonActionPerformed
        // TODO add your handling code here:
        endCall();
    }//GEN-LAST:event_endCallButtonActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        endCall();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnMinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizeActionPerformed
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_btnMinimizeActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        pX = evt.getX();
        pY = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - pX, this.getLocation().y +evt.getY() - pY);
    }//GEN-LAST:event_formMouseDragged
    private int pX;
    private int pY;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CallVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CallVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CallVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CallVideo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CallVideo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnMinimize;
    private javax.swing.JButton endCallButton;
    private javax.swing.JLabel image;
    private javax.swing.JLabel self;
    // End of variables declaration//GEN-END:variables
    private void inittial() {
        isCaller = false;
        camera = Webcam.getDefault();
        image.setText("Đang chờ...");
        setIconImage(new ImageIcon(getClass().getResource("/assets/icon.png")).getImage());
            ComponentResizer com = new ComponentResizer();
            com.registerComponent(this);
            com.setMinimumSize(new Dimension(900, 500));
            com.setMaximumSize(Toolkit.getDefaultToolkit().getScreenSize());
            com.setSnapSize(new Dimension(10, 10));
    }

    public void callToUser(ModelAccount user){
        Service.getInstance().getClient().emit("call",user.getUserID(),new Ack(){
            @Override
            public void call(Object... os) {
                boolean isOnline = (boolean) os[0];
                if(isOnline){
                    isCaller = true;
                    sendImage(user);
                }
            }
        });
    }
    private Thread cameraThread;
    public synchronized void sendImage(ModelAccount user) {
        try {
            if(!camera.isOpen())camera.open();
            cameraThread = new Thread(() -> {
                try {
                    while (true) {
                        if(!camera.isOpen()){
                            ModelCall call = new ModelCall(Service.getInstance().getUser().getUserID(),
                                user.getUserID(),"endCall");
                            Service.getInstance().getClient().emit("image", call.toJsonObject());
                            this.setVisible(false);
                            this.dispose();
                            break;
                        }
                        BufferedImage br = camera.getImage();
                        ImageIcon ic = new ImageIcon(br);
                        self.setIcon(ic);
                        ModelCall call = new ModelCall(Service.getInstance().getUser().getUserID(),
                                user.getUserID(),imageIconToBase64(ic));
                        Service.getInstance().getClient().emit("image", call.toJsonObject());
//                        System.err.println(json);
                        Thread.sleep(500); 
                    }
                } catch (InterruptedException e) {
                    return;
//                    e.printStackTrace();
                }
            });

            cameraThread.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    public JLabel getImage() {
        return image;
    }
    
    public void setImageResponse(ModelCall call) {
        image.setIcon(base64ToImageIcon(call.getImage()));
        image.setText("");
        repaint();
        revalidate();
    }

    public void setImage(ModelCall call) {
        image.setIcon(base64ToImageIcon(call.getImage()));
        image.setText("");
        repaint();
        revalidate();
        if(!isCaller){
            isCaller = true;
            sendToCaller(call);
        }
    }
    
    public synchronized void sendToCaller(ModelCall call){
        try {
            if(!camera.isOpen())camera.open();
            cameraThread = new Thread(() -> {
                try {
                    while (true) {
                        if(!camera.isOpen()){
                            ModelCall newCall = new ModelCall(Service.getInstance().getUser().getUserID(),
                                call.getFromUserID(),"endCall");
                            Service.getInstance().getClient().emit("image_response", newCall.toJsonObject());
                            this.setVisible(false);
                            this.dispose();
                            break;
                        }
                        BufferedImage br = camera.getImage();
                        ImageIcon ic = new ImageIcon(br);
                        self.setIcon(ic);
                        ModelCall newCall = new ModelCall(Service.getInstance().getUser().getUserID(),
                                call.getFromUserID(),imageIconToBase64(ic));
                        Service.getInstance().getClient().emit("image_response", newCall.toJsonObject());
//                        System.err.println(json);
                        Thread.sleep(500); 
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });

            cameraThread.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static String imageIconToBase64(ImageIcon icon) {
        BufferedImage bufferedImage = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
        icon.paintIcon(null, bufferedImage.getGraphics(), 0, 0);

        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            // Encode the image to Base64
            ImageIO.write(bufferedImage, "png", baos);
            byte[] imageBytes = baos.toByteArray();
            return Base64.getEncoder().encodeToString(imageBytes);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
    
    private static ImageIcon base64ToImageIcon(String base64Image) {
        byte[] imageBytes = Base64.getDecoder().decode(base64Image);

        try (ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes)) {
            BufferedImage bufferedImage = ImageIO.read(bais);
            return new ImageIcon(bufferedImage);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
