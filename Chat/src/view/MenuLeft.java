/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import component.ItemPeople;
import event.EventMenuLeft;
import event.PublicEvent;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import model.ModelAccount;
import net.miginfocom.swing.MigLayout;
import swing.ScrollBar;

/**
 *
 * @author Admin
 */
public class MenuLeft extends javax.swing.JPanel {
    private List<ModelAccount> userAccount;
    
    public MenuLeft() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JLayeredPane();
        menuMessage = new component.MenuButton();
        menuGroup = new component.MenuButton();
        menuBox = new component.MenuButton();
        sp = new javax.swing.JScrollPane();
        menuList = new javax.swing.JLayeredPane();

        setBackground(new java.awt.Color(225, 225, 225));

        menu.setOpaque(true);
        menu.setLayout(new java.awt.GridLayout(1, 3));

        menuMessage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/message_selected.png"))); // NOI18N
        menuMessage.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/message.png"))); // NOI18N
        menuMessage.setSelected(true);
        menuMessage.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/message_selected.png"))); // NOI18N
        menuMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMessageActionPerformed(evt);
            }
        });
        menu.add(menuMessage);

        menuGroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/group.png"))); // NOI18N
        menuGroup.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/group.png"))); // NOI18N
        menuGroup.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/group_selected.png"))); // NOI18N
        menuGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGroupActionPerformed(evt);
            }
        });
        menu.add(menuGroup);

        menuBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/box.png"))); // NOI18N
        menuBox.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/box.png"))); // NOI18N
        menuBox.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/box_selected.png"))); // NOI18N
        menuBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBoxActionPerformed(evt);
            }
        });
        menu.add(menuBox);

        sp.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout menuListLayout = new javax.swing.GroupLayout(menuList);
        menuList.setLayout(menuListLayout);
        menuListLayout.setHorizontalGroup(
            menuListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        menuListLayout.setVerticalGroup(
            menuListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );

        sp.setViewportView(menuList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menu)
            .addComponent(sp)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMessageActionPerformed
        if(!menuMessage.isSelected()){
            menuMessage.setSelected(true);
            menuBox.setSelected(false);
            menuGroup.setSelected(false);
            showMessage();
        }
        
    }//GEN-LAST:event_menuMessageActionPerformed

    private void menuGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGroupActionPerformed
        if(!menuGroup.isSelected()){
            menuMessage.setSelected(false);
            menuBox.setSelected(false);
            menuGroup.setSelected(true); 
            showGroup();
        }

    }//GEN-LAST:event_menuGroupActionPerformed

    private void menuBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBoxActionPerformed
        if(!menuBox.isSelected()){
            menuMessage.setSelected(false);
            menuBox.setSelected(true);
            menuGroup.setSelected(false);
            showBox();
        }

    }//GEN-LAST:event_menuBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane menu;
    private component.MenuButton menuBox;
    private component.MenuButton menuGroup;
    private javax.swing.JLayeredPane menuList;
    private component.MenuButton menuMessage;
    private javax.swing.JScrollPane sp;
    // End of variables declaration//GEN-END:variables

    private void init() {
        sp.setVerticalScrollBar(new ScrollBar());
        menuMessage.setVisible(false);
        menuBox.setVisible(false);
        menuGroup.setVisible(false);
        menuList.setLayout(new MigLayout("fillx","0[]0","0[]0"));
        userAccount = new ArrayList<>();
        PublicEvent.getInstance().addEventMenuLeft(new EventMenuLeft(){
            @Override
            public void newUser(List<ModelAccount> users) {
                menuList.removeAll();
                for(ModelAccount i : users){
                    userAccount.add(i);
                    menuList.add(new ItemPeople(i),"wrap");
                    refreshMunuList();
                }
            }

            @Override
            public void userConnect(int userID) {
                
                for(ModelAccount i : userAccount){
                    if(i.getUserID()==userID){
                        i.setStatus(true);
                        PublicEvent.getInstance().getEventMain().updateUser(i);
                        break;
                    }
                }
                if(menuMessage.isSelected()){
                    for(Component com:menuList.getComponents()){
                        ItemPeople item = (ItemPeople) com;
                        if(item.getUser().getUserID()==userID){
                            item.updateStatus(true);
                            break;
                        }
                    }
                }
            }

            @Override
            public void userDisconnect(int userID) {
                for(ModelAccount i : userAccount){
                    if(i.getUserID()==userID){
                        i.setStatus(false);
                        PublicEvent.getInstance().getEventMain().updateUser(i);
                        break;
                    }
                }
                if(menuMessage.isSelected()){
                    for(Component com:menuList.getComponents()){
                        ItemPeople item = (ItemPeople) com;
                        if(item.getUser().getUserID()==userID){
                            item.updateStatus(false);
                            break;
                        }
                    }
                }
            }
        });
        showMessage();
        
    }
    
    private void showMessage(){
        menuList.removeAll();
        for(ModelAccount i:userAccount)
        menuList.add(new ItemPeople(i),"wrap");
        refreshMunuList();
        
    }
    
    private void showBox(){
        menuList.removeAll();
        for(ModelAccount i:userAccount)
        menuList.add(new ItemPeople(i),"wrap");
        refreshMunuList();
    }
    
    private void showGroup(){
        menuList.removeAll();
        for(ModelAccount i:userAccount)
        menuList.add(new ItemPeople(i),"wrap");
        refreshMunuList();
    }
    private void refreshMunuList() {
        menuList.repaint();
        menuList.revalidate();
    }
}
