/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package component;

import app.MessageType;
import emojiicon.Emoji;
import emojiicon.ModelEmoji;
import event.PublicEvent;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileFilter;
import model.ModelAccount;
import model.ModelSendMessage;
import net.miginfocom.swing.MigLayout;
import service.Service;
import swing.ScrollBar;
import swing.WrapLayout;
import view.Main;

/**
 *
 * @author Admin
 */
public class PanelMore extends javax.swing.JPanel {

    /**
     * Creates new form PanelMore
     */
    public PanelMore() {
        initComponents();
        init();
    }
    private ModelAccount user;

    public ModelAccount getUser() {
        return user;
    }

    public void setUser(ModelAccount user) {
        this.user = user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void init() {
        setLayout(new MigLayout("fillx"));
        panelHeader = new JPanel();
        panelHeader.setLayout(new BoxLayout(panelHeader,BoxLayout.LINE_AXIS));
        panelHeader.add(getButtonImage());
        panelHeader.add(getButtonFile());
        panelHeader.add(getEmojiStyle1());
        panelHeader.add(getEmojiStyle2());
        add(panelHeader,"w 100%, h 30!, wrap");
        panelDetail = new JPanel();
        panelDetail.setLayout(new WrapLayout(WrapLayout.LEFT));//wrap in swing
        JScrollPane ch = new JScrollPane(panelDetail);
        ch.setBorder(null);
        ch.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        ch.setVerticalScrollBar(new ScrollBar());
        add(ch,"w 100%, h 100%");
    }
    private JPanel  panelHeader;
    private JPanel panelDetail;
    
    private JButton getButtonImage() {
        OptionButton cmd = new OptionButton();
        cmd.setIcon(new ImageIcon(getClass().getResource("/assets/image.png")));
        cmd.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser ch = new JFileChooser();
                ch.setMultiSelectionEnabled(true);
                ch.setDialogTitle("Select files");
                ch.setFileSelectionMode(JFileChooser.FILES_ONLY);
                ch.setFileFilter(new FileFilter(){
                    @Override
                    public boolean accept(File f) {
                        return f.isDirectory() || isImageFile(f);
                    }

                    @Override
                    public String getDescription() {
                        return "Image File";
                    }
                });
                int option = ch.showOpenDialog(Main.getFrames()[0]);
                if(option == JFileChooser.APPROVE_OPTION){
                    File files[] = ch.getSelectedFiles();
                    try {
                        for(File file:files){
                            LocalTime currentTime = LocalTime.now();
                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a");
                            String time = currentTime.format(formatter);
                            
                            ModelSendMessage message = new ModelSendMessage(MessageType.IMAGE,
                                    Service.getInstance().getUser().getUserID(),
                                    user.getUserID(),"",time);
                            Service.getInstance().addFile(file, message);  
                            PublicEvent.getInstance().getEventChat().sendMessage(message);
                        }
                    } catch (Exception ef) {
                        ef.printStackTrace();
                    }
                }
            }
        });
        return  cmd;
    }
    
    private JButton getButtonFile() {
        OptionButton cmd = new OptionButton();
        cmd.setIcon(new ImageIcon(getClass().getResource("/assets/link.png")));
        cmd.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser ch = new JFileChooser();
                ch.setMultiSelectionEnabled(true);
                ch.setFileFilter(new FileFilter(){
                    @Override
                    public boolean accept(File f) {
                        return f.isDirectory() || f.isFile();
                    }

                    @Override
                    public String getDescription() {
                        return "File";
                    }
                });
                int option = ch.showOpenDialog(Main.getFrames()[0]);
                if(option == JFileChooser.APPROVE_OPTION){
                    File files[] = ch.getSelectedFiles();
                    try {
                        for(File file:files){
                            LocalTime currentTime = LocalTime.now();
                            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a");
                            String time = currentTime.format(formatter);
                            
                            ModelSendMessage message = new ModelSendMessage(MessageType.FILE,
                                    Service.getInstance().getUser().getUserID(),
                                    user.getUserID(),"",time);
                            Service.getInstance().addFile(file, message);  
                            PublicEvent.getInstance().getEventChat().sendMessage(message);
                        }
                    } catch (Exception ef) {
                        ef.printStackTrace();
                    }
                }
            }
        });
        return  cmd;
    }
    
    private JButton getEmojiStyle1() {
        OptionButton cmd = new OptionButton();
        cmd.setIcon(Emoji.getInstance().getImoji(1).toSize(25, 25).getIcon());
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                clearSelected();
                cmd.setSelected(true);
                panelDetail.removeAll();
                for (ModelEmoji d : Emoji.getInstance().getStyle1()) {
                    panelDetail.add(getButton(d));
                }
                panelDetail.repaint();
                panelDetail.revalidate();
            }
        });
        return cmd;
    }

    private JButton getEmojiStyle2() {
        OptionButton cmd = new OptionButton();
        cmd.setIcon(Emoji.getInstance().getImoji(21).toSize(25, 25).getIcon());
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                clearSelected();
                cmd.setSelected(true);
                panelDetail.removeAll();
                for (ModelEmoji d : Emoji.getInstance().getStyle2()) {
                    panelDetail.add(getButton(d));
                }
                panelDetail.repaint();
                panelDetail.revalidate();
            }
        });
        return cmd;
    }
    
    private JButton getButton(ModelEmoji d) {
        JButton c = new JButton(d.getIcon());
        c.setName(d.getId() + "");
        c.setBorder(new EmptyBorder(3, 3, 3, 3));
        c.setCursor(new Cursor(Cursor.HAND_CURSOR));
        c.setContentAreaFilled(false);
        c.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                LocalTime currentTime = LocalTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a");
                String time = currentTime.format(formatter);
                
                ModelSendMessage message = new ModelSendMessage(MessageType.EMOJI,Service.getInstance().getUser().getUserID(),
                        user.getUserID(),d.getId()+"",time);
                Service.getInstance().saveModelSendMessage(message);
                sendMessage(message);
                PublicEvent.getInstance().getEventChat().sendMessage(message);
            }
        });
        return c;
    }
    
    private void sendMessage(ModelSendMessage e) {
        Service.getInstance().getClient().emit("send_to_user", e.toJsonObject());
    }
    
    private boolean isImageFile(File file) {
        String name = file.getName().toLowerCase();
        return name.endsWith(".jpg")||name.endsWith(".png")||name.endsWith(".jpeg")||name.endsWith(".gif");
    }
    
    private void clearSelected() {
        for (Component c : panelHeader.getComponents()) {
            if (c instanceof OptionButton) {
                ((OptionButton) c).setSelected(false);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
